/**
 *
 * CARNIVAL
 *
 * (it's a party of information)
 *
 */


///////////////////////////////////////////////////////////////////////////////
// build script settings
///////////////////////////////////////////////////////////////////////////////
buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.23'
        classpath group: 'org.kordamp.gradle', name: 'stats-gradle-plugin', version: '0.2.2'
    }    
}


///////////////////////////////////////////////////////////////////////////////
// plugins
///////////////////////////////////////////////////////////////////////////////
plugins {
    id 'groovy'
    id 'maven-publish'
}
apply plugin: 'project-report'
apply plugin: 'org.kordamp.gradle.stats'



///////////////////////////////////////////////////////////////////////////////
// maven publishing
///////////////////////////////////////////////////////////////////////////////
task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    from sourceSets.main.allGroovy
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    from groovydoc
    classifier = 'javadoc'
}

publishing {
    publications {
        mavenGroovy(MavenPublication) {
            artifactId = 'carnival-core'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'Carnival Core'
                    description 'The core classes of the Carnival framework'
                    url 'https://github.com/pmbb-ibi/carnival'
                    licenses {
                        license {
                            name 'GNU GENERAL PUBLIC LICENSE, Version 3, 29 June 2007'
                            url 'https://www.gnu.org/licenses/gpl-3.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id 'augustearth'
                            name 'David Birtwell'
                            email 'augustearth@gmail.com'
                        }
                        developer {
                            id 'hjwilli'
                            name 'Heather Williams'
                            email 'hjwilli@gmail.com'
                        }
                    }
                    scm {
                        connection 'scm:git:git://github.com:pmbb-ibi/carnival.git'
                        developerConnection 'scm:git:ssh://github.com:pmbb-ibi/carnival.git'
                        url 'https://github.com/pmbb-ibi/carnival'
                    }
                }
            }
            //pom.withXml {
            //    Node pomNode = asNode()
            //    pomNode.dependencies.'*'.findAll() {
            //        it.artifactId.text() == 'ojdbc6'
            //    }.each() {
            //        it.parent().remove(it)
            //    }
            //}            
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}



///////////////////////////////////////////////////////////////////////////////
// dependencies
///////////////////////////////////////////////////////////////////////////////

repositories {
    // central repository, used for the math dependencies
    // @see http://central.sonatype.org/
    maven { url "https://repo1.maven.org/maven2" }
    maven { url "https://jitpack.io" }
    maven { url "http://download.java.net/maven/2/" }

    //https://mvnrepository.com/
    maven { url "http://central.maven.org/maven2"}

    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()

    mavenLocal()

    flatDir(dir: 'libs', name: 'Local libs')    
}


configurations {
    providedRuntime
    apt
}


// Annotation Processors
// 
// Started getting the following:
// The following annotation processors were detected on the compile classpath: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.GremlinDslProcessor' and 'org.neo4j.kernel.impl.annotations.ServiceProcessor' and 'org.neo4j.kernel.impl.annotations.DocumentationProcessor'. Detecting annotation processors on the compile classpath is deprecated and Gradle 5.0 will ignore them. Please add them to the annotation processor path instead. If you did not intend to use annotation processors, you can use the '-proc:none' compiler argument to ignore them.
// Found documentation on the issue at: https://blog.gradle.org/incremental-compiler-avoidance#about-annotation-processors
// The apt configuration was added as per the docs.

// In this section you declare the dependencies for your production and test code
dependencies {
    // Carnival module dependencies
    compile project(":carnival-graph")
    compile project(":carnival-gremlin-dsl")

    // reflections for dymamic class instantiation
    compile 'org.reflections:reflections:0.9.11'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.9.8'

    //compile group: 'net.sf.opencsv', name: 'opencsv', version: '2.3'
    compile 'com.xlson.groovycsv:groovycsv:1.3'

    compile group: 'org.jyaml', name: 'jyaml', version: '1.3'
    compile group: 'org.yaml', name: 'snakeyaml', version: '1.23'
    
    // mysql
    compile 'mysql:mysql-connector-java:5.1.37'

    // sql server
    compile 'com.microsoft.sqlserver:mssql-jdbc:7.1.2.jre8-preview'

    // postgres
    compile 'org.postgresql:postgresql:42.2.5.jre7'

    // http libraries
    // http-builder was deprecated by http-builder-ng
    // - carnival-core/vine/http.groovy uses the updated http-builder-ng library
    // - carnival-pmbb/vine/redcapVine.groovy uses the old http-builder library; should be updated to use http.groovy
    compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
    compile 'io.github.http-builder-ng:http-builder-ng-core:1.0.3'


    compile 'commons-collections:commons-collections:3.2.2'

    // We use the awesome Spock testing and specification framework
    // the spock dependency is compile due to CoreGraphSpecification
    compile 'org.spockframework:spock-core:1.2-groovy-2.5'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.2'

    // Logging
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'ch.qos.logback:logback-classic:1.2.3'

    // linear algebra libraries 
    // @see https://github.com/yannrichet/groovylab
    compile 'com.github.yannrichet:JMathIO:1.0'
    compile 'com.github.yannrichet:JMathArray:1.0'
    //compile 'com.github.yannrichet:JMathPlot:1.0'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-math3
    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'

    // google data structures
    compile 'com.google.guava:guava:21.0'

    // non-tinkerpop neo4j driver for running cypher
    compile 'org.neo4j.driver:neo4j-java-driver:1.4.4'

    // Apache commons
    compile group: 'commons-io', name: 'commons-io', version: '2.5'

    // https://mvnrepository.com/artifact/org.apache.poi/poi
    compile group: 'org.apache.poi', name: 'poi', version: '3.17'    
    // https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml
    compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.17'


    // https://mvnrepository.com/artifact/org.xs4j/xmlslurper
    compile group: 'org.xs4j', name: 'xmlslurper', version: '3.0.0'

    // https://mvnrepository.com/artifact/org.ccil.cowan.tagsoup/tagsoup
    compile group: 'org.ccil.cowan.tagsoup', name: 'tagsoup', version: '1.2.1'

    // H2 for running database operations over flat files
    compile 'com.h2database:h2:1.4.196'

    // for to work with json
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.4'
    
    // GORM
    compile "org.grails:grails-datastore-gorm-hibernate5:6.1.9.RELEASE"  

    // RDF4J and http dependencies, see <http://graphdb.ontotext.com/documentation/free/using-graphdb-with-the-rdf4j-api.html#rdf4j-api>
    //compile group: 'org.eclipse.rdf4j', name: 'rdf4j-runtime', version: '2.4.0-M1' // TODO: pare this down to only the needed packages
    //compile group: 'org.eclipse.rdf4j', name: 'rdf4j-core', version: '2.4.0-M1'
    compile group: 'org.eclipse.rdf4j', name: 'rdf4j-model', version: '2.4.0-M1'
    compile group: 'org.eclipse.rdf4j', name: 'rdf4j-repository-api', version: '2.4.0-M1'
    compile group: 'org.eclipse.rdf4j', name: 'rdf4j-repository-manager', version: '2.4.0-M1'
    compile group: 'commons-httpclient', name: 'commons-httpclient', version: '3.1'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.10'

    // Spock testing
    compile 'cglib:cglib-nodep:3.2.8'
}


compileGroovy {
    options.annotationProcessorPath = configurations.apt
}





///////////////////////////////////////////////////////////////////////////////
// TASKS - CLI
///////////////////////////////////////////////////////////////////////////////

task carnivalLocalDirInit (dependsOn: ['classes'], type: JavaExec) {
    description 'Run CarnivalLocalDirInit script'

    main = 'carnival.core.cli.CarnivalLocalDirInit'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in

    if (System.getProperty('carnival.home')) {
        systemProperty('carnival.home', System.getProperty('carnival.home'))
        systemProperty('logback.configurationFile', System.getProperty('carnival.home') + '/config/logback.xml')
    }
    if (System.env.CARNIVAL_HOME) {
        systemProperty('logback.configurationFile', System.env.CARNIVAL_HOME + '/config/logback.xml')
    }
    if (System.getProperty('logback.configurationFile')) {
        systemProperty("logback.configurationFile", System.getProperty('logback.configurationFile'))
    } else if (System.env.CARNIVAL_LOGBACK_CONFIG) {
        systemProperty("logback.configurationFile", System.env.CARNIVAL_LOGBACK_CONFIG)
    }
    if (!(System.getProperty('carnival.home') || System.env.CARNIVAL_HOME)) {
        ant.echo "WARNING: Carnival home is not set. Use command line argument -Dcarnival.home= or environment variable CARNIVAL_HOME. See documentation."
        if (!(System.getProperty('logback.configurationFile') || System.env.CARNIVAL_LOGBACK_CONFIG)) {
            ant.echo "WARNING: Logback configuration file not set. Use the -D command line argument like -Dlogback.configurationFile=/path/to/file.xml.  Or, set the environment variable CARNIVAL_LOGBACK_CONFIG to /path/to/file.xml. See documentation."
        }
    }

    jvmArgs '-Xms4g'
    jvmArgs '-Xmx12g'
    jvmArgs '-XX:+UnlockExperimentalVMOptions'
    jvmArgs '-XX:+UseG1GC'
    jvmArgs '-XX:G1MaxNewSizePercent=80'
    jvmArgs '-XX:G1NewSizePercent=80'
    jvmArgs '-XX:G1HeapWastePercent=5'
    jvmArgs '-XX:G1MixedGCLiveThresholdPercent=50'
    jvmArgs '-XX:-PrintGC'
    jvmArgs '-XX:-PrintGCTimeStamps'
}




///////////////////////////////////////////////////////////////////////////////
// BUILD 
///////////////////////////////////////////////////////////////////////////////
task createProperties(dependsOn: processResources) {
  doLast {
    new File("$buildDir/resources/main/version.properties").withWriter { w ->
        Properties p = new Properties()
        p['version'] = project.version.toString()
        p.store w, null
    }
  }
}

classes {
    dependsOn createProperties
}
