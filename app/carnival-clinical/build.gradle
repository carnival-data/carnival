/**
 *
 * CARNIVAL
 *
 * (it's a party of information)
 *
 */


///////////////////////////////////////////////////////////////////////////////
// build script settings
///////////////////////////////////////////////////////////////////////////////
buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.23'
        classpath group: 'org.kordamp.gradle', name: 'stats-gradle-plugin', version: '0.2.2'
    }    
}


///////////////////////////////////////////////////////////////////////////////
// plugins
///////////////////////////////////////////////////////////////////////////////
plugins {
    id 'groovy'
    id 'maven-publish'
}
apply plugin: 'org.kordamp.gradle.stats'



///////////////////////////////////////////////////////////////////////////////
// maven publishing
///////////////////////////////////////////////////////////////////////////////
publishToMavenLocal.dependsOn 'compileGroovy'

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    from sourceSets.main.allGroovy
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    from groovydoc
    classifier = 'javadoc'
}

publishing {
    publications {
        mavenGroovy(MavenPublication) {
            artifactId = 'carnival-clinical'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'Carnival Clinical'
                    description 'Carnival modules for clinical research and biobanking.'
                    url 'https://github.com/pmbb-ibi/carnival'
                    licenses {
                        license {
                            name 'GNU GENERAL PUBLIC LICENSE, Version 3, 29 June 2007'
                            url 'https://www.gnu.org/licenses/gpl-3.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id 'augustearth'
                            name 'David Birtwell'
                            email 'augustearth@gmail.com'
                        }
                        developer {
                            id 'hjwilli'
                            name 'Heather Williams'
                            email 'hjwilli@gmail.com'
                        }
                    }
                    scm {
                        connection 'scm:git:git://github.com:pmbb-ibi/carnival.git'
                        developerConnection 'scm:git:ssh://github.com:pmbb-ibi/carnival.git'
                        url 'https://github.com/pmbb-ibi/carnival'
                    }
                }
            }          
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}


///////////////////////////////////////////////////////////////////////////////
// dependencies
///////////////////////////////////////////////////////////////////////////////

repositories {
    // central repository, used for the math dependencies
    // @see http://central.sonatype.org/
    maven { url "https://repo1.maven.org/maven2" }
    maven { url "https://jitpack.io" }
    maven { url "http://download.java.net/maven/2/" }

    //https://mvnrepository.com/
    maven { url "http://central.maven.org/maven2"}

    // Use 'jcenter' for resolving your dependencies.
    jcenter()

    mavenLocal()

    flatDir(dir: 'libs', name: 'Local libs')    
}


configurations {
    providedRuntime
}


// In this section you declare the dependencies for your production and test code
dependencies {
    // Carnival module dependencies
    compile project(":carnival-core")
    compile project(":carnival-gremlin-dsl")

    // We use the awesome Spock testing and specification framework
    testCompile 'org.spockframework:spock-core:1.2-groovy-2.5'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.2'
}




///////////////////////////////////////////////////////////////////////////////
// BUILD 
///////////////////////////////////////////////////////////////////////////////
task createProperties(dependsOn: processResources) {
  doLast {
    new File("$buildDir/resources/main/version.properties").withWriter { w ->
        Properties p = new Properties()
        p['version'] = project.version.toString()
        p.store w, null
    }
  }
}

classes {
    dependsOn createProperties
}
