/**
 *
 * Carnival top level project.
 *
 */


///////////////////////////////////////////////////////////////////////////////
// plugins
///////////////////////////////////////////////////////////////////////////////

plugins {
    id 'groovy'
    id "com.github.ManifestClasspath" version "0.1.0-RELEASE"
}


///////////////////////////////////////////////////////////////////////////////
// app version
///////////////////////////////////////////////////////////////////////////////

allprojects {
    group = 'edu.upenn.pmbb'
    sourceCompatibility = 1.8
    version = '0.2.7'   // see https://semver.org/
}


subprojects {
    apply plugin: 'groovy'

    tasks.withType(GroovyCompile) {
      options.debug = true
    }
}



///////////////////////////////////////////////////////////////////////////////
// Testing Tasks
///////////////////////////////////////////////////////////////////////////////


subprojects {
    test.ignoreFailures true

    test {
        systemProperty 'vine.config.file.path', System.getProperty('vine.config.file.path')
        systemProperty 'cgis.use.cached.data.files', System.getProperty('cgis.use.cached.data.files')
        systemProperty 'cgis.use.cached.graph', System.getProperty('cgis.use.cached.graph')
        systemProperty 'test.http', System.getProperty('test.http')
        systemProperty 'test.graph.rollback', System.getProperty('test.graph.rollback')
        systemProperty 'allow.redcap.modification', System.getProperty('allow.redcap.modification')
        systemProperty 'disable.filevine.tests', System.getProperty('disable.filevine.tests')
        testLogging {
            events 'standard_out'
        }

        if (System.getProperty('carnival.home')) {
            systemProperty('carnival.home', System.getProperty('carnival.home'))
            systemProperty('logback.configurationFile', System.getProperty('carnival.home') + '/config/logback.xml')
        }
        if (System.env.CARNIVAL_HOME) {
            systemProperty('logback.configurationFile', System.env.CARNIVAL_HOME + '/config/logback.xml')
        }
        if (System.getProperty('logback.configurationFile')) {
            systemProperty("logback.configurationFile", System.getProperty('logback.configurationFile'))
        } else if (System.env.CARNIVAL_LOGBACK_CONFIG) {
            systemProperty("logback.configurationFile", System.env.CARNIVAL_LOGBACK_CONFIG)
        }
        if (!(System.getProperty('carnival.home') || System.env.CARNIVAL_HOME)) {
            ant.echo "WARNING: Carnival home is not set. Use command line argument -Dcarnival.home= or environment variable CARNIVAL_HOME. See documentation."
            if (!(System.getProperty('logback.configurationFile') || System.env.CARNIVAL_LOGBACK_CONFIG)) {
                ant.echo "WARNING: Logback configuration file not set. Use the -D command line argument like -Dlogback.configurationFile=/path/to/file.xml.  Or, set the environment variable CARNIVAL_LOGBACK_CONFIG to /path/to/file.xml. See documentation."
            }
        }

        jvmArgs '-Xms4g'
        jvmArgs '-Xmx6g'
    }
}


task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")

    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test

    ant.echo "TestReport - buildDir: $buildDir/reports/allTests"
}


///////////////////////////////////////////////////////////////////////////////
// convenience tasks
///////////////////////////////////////////////////////////////////////////////

task refreshGremlinDsl {
    dependsOn 'carnival-gremlin-dsl:publishToMavenLocal'
}

task refreshUtil {
    dependsOn refreshGremlinDsl
    dependsOn 'carnival-util:publishToMavenLocal'
}

task publishGraph {
    dependsOn refreshUtil
    dependsOn 'carnival-graph:publishToMavenLocal'
    dependsOn 'carnival-gremlin-dsl:publishToMavenLocal'
}

task publishCore {
    dependsOn publishGraph
    dependsOn 'carnival-core:publishToMavenLocal'
}

task publishAll {
    dependsOn publishCore
    dependsOn 'carnival-clinical:publishToMavenLocal'
}

task deleteLocalRepos {
    doLast {
        [
            "${System.getProperty('user.home')}/.m2/repository/edu/upenn/pmbb/", 
            "${System.getProperty('user.home')}/.groovy/grapes/edu.upenn.pmbb/"
        ].each { bd ->
            ant.echo(bd)
            def path = ant.path {
                dirset(dir:bd, includes:'carnival-*')
            }
            path.list().each {
                println it
                ant.delete(includeEmptyDirs:true, verbose:true, dir:it)
            }        
            //ant.delete(includeEmptyDirs:true, verbose:true) {
            //    dirset(dir:bd, includes:'carnival-*')
            //}
        }
    }
}

task cleanBuild {
    subprojects.each { dependsOn("${it.name}:clean") } 
    subprojects.each { finalizedBy("${it.name}:compileGroovy") } 
    doLast {println 'cleanBuild'} 
}

task localRebuildAndPublish { 
    dependsOn cleanBuild
    dependsOn deleteLocalRepos
    finalizedBy publishAll
    doLast {println 'localRebuildAndPublish'} 
}

task localBuildAndPublish { 
    subprojects.each { dependsOn("${it.name}:compileGroovy") } 
    dependsOn deleteLocalRepos
    finalizedBy publishAll
    doLast {println 'localBuildAndPublish'} 
}

