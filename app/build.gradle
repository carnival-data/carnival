/******************************************************************************
 *
 * CARNIVAL
 *
 *****************************************************************************/


///////////////////////////////////////////////////////////////////////////////
// build script settings
///////////////////////////////////////////////////////////////////////////////
buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.27'
        classpath group: 'org.kordamp.gradle', name: 'stats-gradle-plugin', version: '0.2.2'
    }    
}


///////////////////////////////////////////////////////////////////////////////
// plugins
///////////////////////////////////////////////////////////////////////////////
plugins {
    id 'groovy'
    id 'maven-publish'
    id "com.github.ManifestClasspath" version "0.1.0-RELEASE"
    
    // code coverage
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.12.0'
}


///////////////////////////////////////////////////////////////////////////////
// Java
///////////////////////////////////////////////////////////////////////////////
task printJavaVersion {
    println "[Carnival] Java version: ${JavaVersion.current()}"
}
clean.dependsOn('printJavaVersion')
compileGroovy.dependsOn('printJavaVersion')


///////////////////////////////////////////////////////////////////////////////
// app version
// repositories
// common plugins
///////////////////////////////////////////////////////////////////////////////
allprojects {
    group = carnivalGroup
    version = carnivalVersion   // see https://semver.org/
    sourceCompatibility = JavaVersion.toVersion("${javaVersion}")
    targetCompatibility = JavaVersion.toVersion("${javaVersion}")

    repositories {
        mavenCentral()
        mavenLocal()
        flatDir(dir: 'libs', name: 'Local libs')  
    }

    apply plugin: 'jacoco'
    apply plugin: 'project-report'
    apply plugin: 'org.kordamp.gradle.stats'
}


///////////////////////////////////////////////////////////////////////////////
// sub-project dependencies
///////////////////////////////////////////////////////////////////////////////
subprojects {
    apply plugin: 'groovy'

    dependencies {
        // see gradle.properties for versions

        // Groovy
        implementation "org.codehaus.groovy:groovy-all:${groovyVersion}"

        // Tinkerpop
        implementation "org.apache.tinkerpop:gremlin-core:${gremlinVersion}"
        implementation "org.apache.tinkerpop:gremlin-groovy:${gremlinVersion}"
        implementation "org.apache.tinkerpop:tinkergraph-gremlin:${gremlinVersion}"

        // Neo4J
        implementation "org.apache.tinkerpop:neo4j-gremlin:${gremlinVersion}"
        implementation "org.neo4j:neo4j-tinkerpop-api-impl:${neo4jTinkerpopVersion}"
        implementation "org.neo4j.driver:neo4j-java-driver:${neo4JavaDriverVersion}"
        //implementation "org.neo4j:parent:${neo4JavaDriverVersion}"
        //implementation "org.neo4j:neo4j-community:${neo4JavaDriverVersion}"
        //implementation "org.neo4j:neo4j-bolt:${neo4JavaDriverVersion}"

        // Testing
        // there are test helpers implemented in the source tree, so the
        // implementation dependency tag is required
        //implementation "org.spockframework:spock-core:1.3-groovy-2.5"
        testImplementation 'org.spockframework:spock-core:2.0-M3-groovy-3.0'        

        // Logging
        implementation 'org.slf4j:slf4j-api:1.7.30'
        implementation 'ch.qos.logback:logback-classic:1.2.3'

        // Data formats
        implementation "org.yaml:snakeyaml:1.27"
        implementation "com.opencsv:opencsv:5.2"

        // Apache Commons
        implementation "commons-io:commons-io:2.5"
    }
}


///////////////////////////////////////////////////////////////////////////////
// debug options
///////////////////////////////////////////////////////////////////////////////
subprojects {
    // compile in debug modes
    tasks.withType(GroovyCompile) {
      //options.debug = true
      //options.verbose = true
      //options.listFiles = true
    }

    tasks.withType(JavaCompile) {
      //options.debug = true
      //options.verbose = true
      //options.listFiles = true
    }
}


///////////////////////////////////////////////////////////////////////////////
// Github Publish
///////////////////////////////////////////////////////////////////////////////
subprojects {
    apply plugin: "maven-publish"
    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/pmbb-ibi/carnival")
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USER")
                    password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}


///////////////////////////////////////////////////////////////////////////////
// Testing
///////////////////////////////////////////////////////////////////////////////
apply from: 'setupTestsReports.gradle'

subprojects {
    // use --continue flag instead of setting test.ignoreFailures to true
    // See https://docs.gradle.org/current/userguide/command_line_interface.html#sec:continue_build_on_failure
    //test.ignoreFailures true

    test {
        useJUnitPlatform()
        //useTestNG()

        testLogging {
            events "passed", "skipped", "failed"
        }

        systemProperty 'test.http', System.getProperty('test.http') ?: true
        systemProperty 'test.graph.rollback', System.getProperty('test.graph.rollback')
        testLogging {
            events 'standard_out'
        }

        if (System.getProperty('carnival.home')) {
            systemProperty('carnival.home', System.getProperty('carnival.home'))
            systemProperty('logback.configurationFile', System.getProperty('carnival.home') + '/config/logback.xml')
        }
        if (System.getenv('CARNIVAL_HOME')) {
            systemProperty('carnival.home', System.getenv('CARNIVAL_HOME'))
            systemProperty('logback.configurationFile', System.getenv('CARNIVAL_HOME') + '/config/logback.xml')
        }
        if (System.getProperty('logback.configurationFile')) {
            systemProperty("logback.configurationFile", System.getProperty('logback.configurationFile'))
        } else if (System.getenv('CARNIVAL_LOGBACK_CONFIG')) {
            systemProperty("logback.configurationFile", System.getenv('CARNIVAL_LOGBACK_CONFIG'))
        }
        if (!(System.getProperty('carnival.home') || System.getenv('CARNIVAL_HOME'))) {
            ant.echo "WARNING: Carnival home is not set. Use command line argument -Dcarnival.home= or environment variable CARNIVAL_HOME. See documentation."
            if (!(System.getProperty('logback.configurationFile') || System.getenv('CARNIVAL_LOGBACK_CONFIG'))) {
                ant.echo "WARNING: Logback configuration file not set. Use the -D command line argument like -Dlogback.configurationFile=/path/to/file.xml.  Or, set the environment variable CARNIVAL_LOGBACK_CONFIG to /path/to/file.xml. See documentation."
            }
        }

        jvmArgs '-Xms4g'
        jvmArgs '-Xmx6g'
    }
}


// to run all test suites even if a failure occurs use the flag '--continue'
// https://docs.gradle.org/current/userguide/command_line_interface.html#sec:continue_build_on_failure
task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")

    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test

    ant.echo "TestReport - buildDir: $buildDir/reports/allTests"

    doLast{
       browse "$buildDir/reports/allTests/index.html"
   }
}


def browse(path) {
    def os = org.gradle.internal.os.OperatingSystem.current()
    if (os.isWindows()) {
        exec { commandLine 'cmd', '/c', "start $path" }
    } else if (os.isMacOsX()) {
        exec { commandLine 'open', "$path" }
    }
}



///////////////////////////////////////////////////////////////////////////////
// JaCoCo code coverage
///////////////////////////////////////////////////////////////////////////////

// Only report code coverage for projects that are distributed
def publishedProjects = subprojects.findAll()

task jacocoMerge(type: JacocoMerge) {
    publishedProjects.each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn publishedProjects.test, jacocoMerge

    additionalSourceDirs.from = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(publishedProjects.sourceSets.main.output)
    executionData jacocoMerge.destinationFile

    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }
}

coveralls {
    sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn jacocoRootReport
}
