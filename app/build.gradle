/**
 *
 * Carnival top level project.
 *
 */


///////////////////////////////////////////////////////////////////////////////
// plugins
///////////////////////////////////////////////////////////////////////////////

plugins {
    id 'groovy'
    id "com.github.ManifestClasspath" version "0.1.0-RELEASE"
}


///////////////////////////////////////////////////////////////////////////////
// app version
///////////////////////////////////////////////////////////////////////////////

allprojects {
    group = 'edu.upenn.pmbb'
    sourceCompatibility = 1.8
    version = '0.2.6'   // see https://semver.org/
}


subprojects {
    apply plugin: 'groovy'

    /*
    //https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_configurations_graph
    //https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_known_issues
    apply plugin: 'java-library'

    configurations {
        apiElements {
            outgoing.variants.getByName('classes').artifact(
                file: compileGroovy.destinationDir,
                type: ArtifactTypeDefinition.JVM_CLASS_DIRECTORY,
                builtBy: compileGroovy)
        }
    }
    */
}

///////////////////////////////////////////////////////////////////////////////
// HELPERS - CONFIGURATION
///////////////////////////////////////////////////////////////////////////////

ext.checkEnvironment = {
    if (!System.env.CARNIVAL_LOCAL) {
        def curDir = System.getProperty("user.dir")
        def msg = "WARNING: Environment variable CARNIVAL_LOCAL is not set. Using $curDir as default."
        ant.echo "$msg"
    }
}

ext.findConfigDir = {
    //ant.echo "findConfigDir"
    checkEnvironment()

    def configDir

    if (project.hasProperty('configDir')) {
        def dirPathFromProp = project.getProperty('configDir')
        configDir = new File(dirPathFromProp) 
        if (!configDir.exists()) {
            ant.echo "config dir not found: $dirPathFromProp"
            configDir = null
        }
    }

    if (!configDir && System.env.CARNIVAL_LOCAL) {
        def cd = "${System.env.CARNIVAL_LOCAL}/config"
        configDir = new File(cd)
        if (!configDir.exists()) {
            ant.echo "config dir not found: $cd"
            configDir = null
        }
    }

    if (!configDir) {
        configDir = new File('config')
        if (!configDir.exists() || !configDir.isDirectory()) {
            ant.echo 'default config dir does not exist'
            configDir = null
        }
    }

    ant.echo "configDir: ${configDir.canonicalPath}"
    return configDir
    compileGroovy.dependsOn ':carnival-gremlin-dsl:publishToMavenLocal'
}


ext.findConfigFile = { String propertyName, String fileName ->
    //ant.echo "findConfigFile $propertyName $fileName"
    checkEnvironment()

    def configFile

    if (!configFile && project.hasProperty(propertyName)) {
        def filePathFromProp = project.getProperty(propertyName)
        configFile = new File(filePathFromProp) 
        if (!configFile.exists()) {
            ant.echo "config file not found: $propertyName $filePathFromProp"
            configFile = null
        }
    }

    if (!configFile) {
        def configDir = findConfigDir()
        if (!configDir) {
            ant.echo "WARNING: No config directory."
        } else {
            configFile = new File(configDir, fileName)
            if (!configFile.exists()) {
                ant.echo "config file not found: $configFile"
                configFile = null
            }
        }
    }

    ant.echo "findConfigFile($propertyName, $fileName) : $configFile"
    return configFile
}

/*
ext.setLogbackConfig = {
    // set the logback config system property
    def logbackConfigFile = findConfigFile('logback', 'logback.xml')
    if (!logbackConfigFile?.exists()) ant.echo "WARNING: Could not find logback configuration file: $logbackConfigFile"
    systemProperty "logback.configurationFile", "$logbackConfigFile"
}

task setLogbackConfig {
    // set the logback config system property
    def logbackConfigFile = findConfigFile('logback', 'logback.xml')
    if (!logbackConfigFile?.exists()) ant.echo "WARNING: Could not find logback configuration file: $logbackConfigFile"
    systemProperty "logback.configurationFile", "$logbackConfigFile"
}
*/

///////////////////////////////////////////////////////////////////////////////
// Testing Tasks
///////////////////////////////////////////////////////////////////////////////

subprojects {
    test.ignoreFailures true

    test {
        systemProperty 'vine.config.file.path', System.getProperty('vine.config.file.path')
        systemProperty 'cgis.use.cached.data.files', System.getProperty('cgis.use.cached.data.files')
        systemProperty 'cgis.use.cached.graph', System.getProperty('cgis.use.cached.graph')
        systemProperty 'test.vine.live.data', System.getProperty('test.vine.live.data')
        systemProperty 'test.graph.rollback', System.getProperty('test.graph.rollback')
        systemProperty 'allow.redcap.modification', System.getProperty('allow.redcap.modification')
        systemProperty 'disable.filevine.tests', System.getProperty('disable.filevine.tests')
        //systemProperty 'config.file.path', findAppConfigFile()
        testLogging {
            //showStandardStreams = true
            //exceptionFormat = 'full'
            events 'standard_out'
        }

        // set the logback config system property
        def logbackConfigFile = findConfigFile('logback', 'logback.xml')
        if (logbackConfigFile?.exists()) systemProperty("logback.configurationFile", "$logbackConfigFile")
        else ant.echo("WARNING: Could not find logback configuration file: $logbackConfigFile")
       
        jvmArgs '-Xms4g'
        jvmArgs '-Xmx6g'

       // set JVM arguments for the test JVM(s)
       // jvmArgs '-XX:MaxPermSize=256m'
    }
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")

    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test

    ant.echo "TestReport - buildDir: $buildDir/reports/allTests"
    println "TestReport - buildDir: $buildDir/reports/allTests"
}


///////////////////////////////////////////////////////////////////////////////
// stats
///////////////////////////////////////////////////////////////////////////////

//task aggregateStatsReport(type: org.kordamp.gradle.stats.AggregateStatsReportTask) {}


///////////////////////////////////////////////////////////////////////////////
// convenience tasks
///////////////////////////////////////////////////////////////////////////////

task refreshGremlinDsl {
    dependsOn 'carnival-gremlin-dsl:publishToMavenLocal'
}

task refreshUtil {
    dependsOn refreshGremlinDsl
    dependsOn 'carnival-util:publishToMavenLocal'
}

task publishGraph {
    dependsOn refreshUtil
    dependsOn 'carnival-graph:publishToMavenLocal'
    dependsOn 'carnival-gremlin-dsl:publishToMavenLocal'
}

task publishCore {
    dependsOn publishGraph
    dependsOn 'carnival-core:publishToMavenLocal'
}

task publishAll {
    dependsOn publishCore
    dependsOn 'carnival-clinical:publishToMavenLocal'
}

