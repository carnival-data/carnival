/**
 *
 * Carnival top level project.
 *
 */


///////////////////////////////////////////////////////////////////////////////
// plugins
///////////////////////////////////////////////////////////////////////////////

plugins {
    id 'groovy'
    id "com.github.ManifestClasspath" version "0.1.0-RELEASE"
    id ("maven-publish")
    // code coverage
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.6.3'
}



///////////////////////////////////////////////////////////////////////////////
// app version
///////////////////////////////////////////////////////////////////////////////

allprojects {
    group = 'edu.upenn.pmbb'
    sourceCompatibility = 1.8
    version = '0.3.0'   // see https://semver.org/

    apply plugin: 'jacoco'
}


subprojects {
    apply plugin: 'groovy'  
}

// add to base project for jacoco plugin
repositories {
    jcenter()
    mavenLocal()  
}


///////////////////////////////////////////////////////////////////////////////
// Github Publish
///////////////////////////////////////////////////////////////////////////////
subprojects {
    apply plugin: "maven-publish"
    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/pmbb-ibi/carnival")
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USER")
                    password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}

///////////////////////////////////////////////////////////////////////////////
// Testing Tasks
///////////////////////////////////////////////////////////////////////////////
apply from: 'setupTestsReports.gradle'

subprojects {
    // use --continue flag instead of setting test.ignoreFailures to true
    // See https://docs.gradle.org/current/userguide/command_line_interface.html#sec:continue_build_on_failure
    //test.ignoreFailures true

    test {
        systemProperty 'vine.config.file.path', System.getProperty('vine.config.file.path')
        systemProperty 'cgis.use.cached.data.files', System.getProperty('cgis.use.cached.data.files')
        systemProperty 'cgis.use.cached.graph', System.getProperty('cgis.use.cached.graph')
        systemProperty 'test.http', System.getProperty('test.http') ?: true
        systemProperty 'test.graph.rollback', System.getProperty('test.graph.rollback')
        systemProperty 'allow.redcap.modification', System.getProperty('allow.redcap.modification')
        systemProperty 'disable.filevine.tests', System.getProperty('disable.filevine.tests')
        testLogging {
            events 'standard_out'
        }

        if (System.getProperty('carnival.home')) {
            systemProperty('carnival.home', System.getProperty('carnival.home'))
            systemProperty('logback.configurationFile', System.getProperty('carnival.home') + '/config/logback.xml')
        }
        if (System.env.CARNIVAL_HOME) {
            systemProperty('logback.configurationFile', System.env.CARNIVAL_HOME + '/config/logback.xml')
        }
        if (System.getProperty('logback.configurationFile')) {
            systemProperty("logback.configurationFile", System.getProperty('logback.configurationFile'))
        } else if (System.env.CARNIVAL_LOGBACK_CONFIG) {
            systemProperty("logback.configurationFile", System.env.CARNIVAL_LOGBACK_CONFIG)
        }
        if (!(System.getProperty('carnival.home') || System.env.CARNIVAL_HOME)) {
            ant.echo "WARNING: Carnival home is not set. Use command line argument -Dcarnival.home= or environment variable CARNIVAL_HOME. See documentation."
            if (!(System.getProperty('logback.configurationFile') || System.env.CARNIVAL_LOGBACK_CONFIG)) {
                ant.echo "WARNING: Logback configuration file not set. Use the -D command line argument like -Dlogback.configurationFile=/path/to/file.xml.  Or, set the environment variable CARNIVAL_LOGBACK_CONFIG to /path/to/file.xml. See documentation."
            }
        }

        jvmArgs '-Xms4g'
        jvmArgs '-Xmx6g'
    }
}

// to run all test suites even if a failure occurs use the flag '--continue'
// https://docs.gradle.org/current/userguide/command_line_interface.html#sec:continue_build_on_failure
task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")

    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test

    ant.echo "TestReport - buildDir: $buildDir/reports/allTests"

    doLast{
       browse "$buildDir/reports/allTests/index.html"
   }
}


def browse(path) {
    def os = org.gradle.internal.os.OperatingSystem.current()
    if (os.isWindows()) {
        exec { commandLine 'cmd', '/c', "start $path" }
    } else if (os.isMacOsX()) {
        exec { commandLine 'open', "$path" }
    }
}

///////////////////////////////////////////////////////////////////////////////
// convenience local publishing tasks
///////////////////////////////////////////////////////////////////////////////

task refreshGremlinDsl {
    dependsOn 'carnival-gremlin-dsl:publishToMavenLocal'
}

task refreshUtil {
    dependsOn refreshGremlinDsl
    dependsOn 'carnival-util:publishToMavenLocal'
}

task publishGraph {
    dependsOn refreshUtil
    dependsOn 'carnival-graph:publishToMavenLocal'
    dependsOn 'carnival-gremlin-dsl:publishToMavenLocal'
}

task publishCore {
    dependsOn publishGraph
    dependsOn 'carnival-core:publishToMavenLocal'
}

task publishAll {
    dependsOn publishCore
    dependsOn 'carnival-clinical:publishToMavenLocal'
}

//This JaCoCo coverage task for multi-module Gradle project was inspired by:
//https://github.com/ben-manes/caffeine/blob/master/build.gradle
task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'

    dependsOn(subprojects.test)

    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)

    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }

    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    dependsOn jacocoRootReport
}