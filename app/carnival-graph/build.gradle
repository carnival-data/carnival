/**
 *
 * carnival-util
 *
 * Set of utility classes that help with: 
 *  - data tables
 *  - interaction with data sources
 *  - code groups
 *
 *
 */


///////////////////////////////////////////////////////////////////////////////
// build script settings
///////////////////////////////////////////////////////////////////////////////
buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.21'
        classpath group: 'org.kordamp.gradle', name: 'stats-gradle-plugin', version: '0.2.2'
    }    
}


///////////////////////////////////////////////////////////////////////////////
// plugins
///////////////////////////////////////////////////////////////////////////////
plugins {
    id 'groovy'
    id 'maven-publish'
}
apply plugin: 'org.kordamp.gradle.stats'



///////////////////////////////////////////////////////////////////////////////
// maven publishing
///////////////////////////////////////////////////////////////////////////////
publishToMavenLocal.dependsOn 'compileGroovy'

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    from sourceSets.main.allGroovy
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    from groovydoc
    classifier = 'javadoc'
}

publishing {
    publications {
        mavenGroovy(MavenPublication) {
            artifactId = 'carnival-graph'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'Carnival Graph'
                    description 'Property graph tools in the Carnival framework'
                    url 'https://github.com/pennbiobank/carnival-public'
                    licenses {
                        license {
                            name 'GNU GENERAL PUBLIC LICENSE, Version 3, 29 June 2007'
                            url 'https://www.gnu.org/licenses/gpl-3.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id 'augustearth'
                            name 'David Birtwell'
                            email 'augustearth@gmail.com'
                        }
                        developer {
                            id 'hjwilli'
                            name 'Heather Williams'
                            email 'hjwilli@gmail.com'
                        }
                    }
                    scm {
                        connection 'scm:git:git://github.com:pennbiobank/carnival-public.git'
                        developerConnection 'scm:git:ssh://github.com:pennbiobank/carnival-public.git'
                        url 'https://github.com/pennbiobank/carnival-public'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}



///////////////////////////////////////////////////////////////////////////////
// dependencies
///////////////////////////////////////////////////////////////////////////////

repositories {
    maven { url "https://repo1.maven.org/maven2" }
    maven { url "https://jitpack.io" }
    maven { url "http://download.java.net/maven/2/" }
    maven { url "http://central.maven.org/maven2"}

    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()

    mavenLocal()
}


configurations {
    providedRuntime
    apt
}


// In this section you declare the dependencies for your production and test code
dependencies {
    // Carnival module dependencies

    // included dependencies for groovy
    compile project(":carnival-util")

    // Logging
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'ch.qos.logback:logback-classic:1.2.3'

    // reflections for dymamic class instantiation
    compile 'org.reflections:reflections:0.9.11'

    // Tinkerpop
    compile 'org.apache.tinkerpop:gremlin-core:3.4.3'
    compile 'org.apache.tinkerpop:gremlin-groovy:3.4.3'
    compile 'org.apache.tinkerpop:tinkergraph-gremlin:3.4.3'

    // We use the awesome Spock testing and specification framework
    testCompile 'org.spockframework:spock-core:1.2-groovy-2.5'
}


compileGroovy {
    options.annotationProcessorPath = configurations.apt
}








///////////////////////////////////////////////////////////////////////////////
// BUILD 
///////////////////////////////////////////////////////////////////////////////
task createProperties(dependsOn: processResources) {
  doLast {
    new File("$buildDir/resources/main/version.properties").withWriter { w ->
        Properties p = new Properties()
        p['version'] = project.version.toString()
        p.store w, null
    }
  }
}

classes {
    dependsOn createProperties
}



