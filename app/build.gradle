/******************************************************************************
 *
 * CARNIVAL
 *
 *****************************************************************************/


///////////////////////////////////////////////////////////////////////////////
// build script settings
///////////////////////////////////////////////////////////////////////////////
buildscript {
    repositories {
        mavenCentral()
        //mavenLocal()
    }
    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '2.2'
        classpath group: 'org.kordamp.gradle', name: 'stats-gradle-plugin', version: '0.2.2'
    }    
}


///////////////////////////////////////////////////////////////////////////////
// plugins
///////////////////////////////////////////////////////////////////////////////
plugins {
    id 'groovy'
    id 'maven-publish'
    id 'signing'
    id "com.github.ManifestClasspath" version "0.1.0-RELEASE"
    
    // code coverage
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.12.0'
}


///////////////////////////////////////////////////////////////////////////////
// debug printing
///////////////////////////////////////////////////////////////////////////////
clean.dependsOn('printVersions')
compileGroovy.dependsOn('printVersions')


///////////////////////////////////////////////////////////////////////////////
// app version
// repositories
// common plugins
///////////////////////////////////////////////////////////////////////////////
allprojects {
    group = carnivalGroup
    version = carnivalVersion   // see https://semver.org/
    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
    sourceCompatibility = JavaVersion.toVersion("${javaVersion}")
    targetCompatibility = JavaVersion.toVersion("${javaVersion}")

    task printVersions {
        doLast {
            println "[Carnival] Java version: ${JavaVersion.current()}"
            println "[Carnival] Carnival version: ${version}"
            println "[Carnival] Is release version: ${isReleaseVersion}"
        }
    }

    repositories {
        mavenCentral()
        //mavenLocal()
        flatDir(dir: 'libs', name: 'Local libs')  
    }

    apply plugin: 'jacoco'
    apply plugin: 'project-report'
    apply plugin: 'org.kordamp.gradle.stats'
}


///////////////////////////////////////////////////////////////////////////////
// sub-project dependencies
///////////////////////////////////////////////////////////////////////////////
subprojects {
    apply plugin: 'groovy'

    dependencies {
        // see gradle.properties for versions

        // Groovy
        implementation "org.apache.groovy:groovy-all:${groovyVersion}"

        // Tinkerpop
        implementation "org.apache.tinkerpop:gremlin-core:${gremlinVersion}"
        implementation "org.apache.tinkerpop:gremlin-groovy:${gremlinVersion}"
        implementation "org.apache.tinkerpop:tinkergraph-gremlin:${gremlinVersion}"

        // Neo4J
        //implementation "org.apache.tinkerpop:neo4j-gremlin:${gremlinVersion}"
        //implementation "org.neo4j:neo4j-tinkerpop-api-impl:${neo4jTinkerpopVersion}"
        //implementation "org.neo4j.driver:neo4j-java-driver:${neo4JavaDriverVersion}"
        //implementation "org.neo4j:parent:${neo4JavaDriverVersion}"
        //implementation "org.neo4j:neo4j-community:${neo4JavaDriverVersion}"
        //implementation "org.neo4j:neo4j-bolt:${neo4JavaDriverVersion}"

        // JanusGraph
        //implementation 'org.janusgraph:janusgraph:0.6.2'
        //implementation 'org.janusgraph:janusgraph-berkeleyje:0.6.2'
        //implementation 'org.janusgraph:janusgraph-lucene:0.6.2'

        // Testing
        // there are test helpers implemented in the source tree, so the
        // implementation dependency tag is required
        testImplementation 'org.spockframework:spock-core:2.4-M4-groovy-4.0'
        //testImplementation 'org.spockframework:spock-core:2.2-M3-groovy-3.0'      

        // Logging
        implementation 'org.slf4j:slf4j-api:2.0.13'
        implementation 'ch.qos.logback:logback-classic:1.5.6'

        // Data formats
        implementation "org.yaml:snakeyaml:2.2"
        implementation "com.opencsv:opencsv:5.9"

        // Apache Commons
        implementation "commons-io:commons-io:2.16.1"
    }
}


///////////////////////////////////////////////////////////////////////////////
// debug options
///////////////////////////////////////////////////////////////////////////////
subprojects {
    // compile in debug modes
    tasks.withType(GroovyCompile) {
      //options.debug = true
      //options.verbose = true
      //options.listFiles = true
    }

    tasks.withType(JavaCompile) {
      //options.debug = true
      //options.verbose = true
      //options.listFiles = true
    }
}

///////////////////////////////////////////////////////////////////////////////
// Publishing
///////////////////////////////////////////////////////////////////////////////

subprojects {
    apply plugin: "maven-publish"
    apply plugin: "signing"
    publishToMavenLocal.dependsOn 'printVersions'
    
    tasks.withType(Sign) { onlyIf { isReleaseVersion } }


    /*task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }*/


    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        from sourceSets.main.allGroovy
        archiveClassifier = 'sources'
    }

    task javadocJar(type: Jar) {
        from javadoc
        from groovydoc
        archiveClassifier = 'javadoc'
    }


    publishing {
        repositories {
            maven {
              name = "Central"
              def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
              def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
              url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
              credentials {
                username = project.findProperty("central.user") ?: System.getenv("CENTRAL_USER")
                password = project.findProperty("central.password") ?: System.getenv("CENTRAL_PASSWORD")
              }
            }
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/carnival-data/carnival")
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USER")
                    password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}



///////////////////////////////////////////////////////////////////////////////
// Dependency Resolution
///////////////////////////////////////////////////////////////////////////////
task resolveRuntimeDependencies(group: "Dependency Resolution") {
    description "Resolves all runtime and testRuntime dependencies (e.g. to build offline later)."

    subprojects {
        doLast {
            configurations.runtimeClasspath {
                it.resolve()
            }

            configurations.testRuntimeClasspath {
                it.resolve()
            }
        }
    }
}


///////////////////////////////////////////////////////////////////////////////
// Testing
///////////////////////////////////////////////////////////////////////////////
apply from: 'setupTestsReports.gradle'

subprojects {
    // use --continue flag instead of setting test.ignoreFailures to true
    // See https://docs.gradle.org/current/userguide/command_line_interface.html#sec:continue_build_on_failure
    //test.ignoreFailures true

    test {
        useJUnitPlatform()
        //useTestNG()

        testLogging {
            events "passed", "skipped", "failed"
        }

        systemProperty 'test.http', System.getProperty('test.http') ?: true
        systemProperty 'test.graph.rollback', System.getProperty('test.graph.rollback')
        testLogging {
            events 'standard_out'
        }

        if (System.getProperty('carnival.home')) {
            systemProperty('carnival.home', System.getProperty('carnival.home'))
            systemProperty('logback.configurationFile', System.getProperty('carnival.home') + '/config/logback.xml')
        }
        if (System.getenv('CARNIVAL_HOME')) {
            systemProperty('carnival.home', System.getenv('CARNIVAL_HOME'))
            systemProperty('logback.configurationFile', System.getenv('CARNIVAL_HOME') + '/config/logback.xml')
        }
        if (System.getProperty('logback.configurationFile')) {
            systemProperty("logback.configurationFile", System.getProperty('logback.configurationFile'))
        } else if (System.getenv('CARNIVAL_LOGBACK_CONFIG')) {
            systemProperty("logback.configurationFile", System.getenv('CARNIVAL_LOGBACK_CONFIG'))
        }
        if (!(System.getProperty('carnival.home') || System.getenv('CARNIVAL_HOME'))) {
            ant.echo "WARNING: Carnival home is not set. Use command line argument -Dcarnival.home= or environment variable CARNIVAL_HOME. See documentation."
            if (!(System.getProperty('logback.configurationFile') || System.getenv('CARNIVAL_LOGBACK_CONFIG'))) {
                ant.echo "WARNING: Logback configuration file not set. Use the -D command line argument like -Dlogback.configurationFile=/path/to/file.xml.  Or, set the environment variable CARNIVAL_LOGBACK_CONFIG to /path/to/file.xml. See documentation."
            }
        }
    }
}


// to run all test suites even if a failure occurs use the flag '--continue'
// https://docs.gradle.org/current/userguide/command_line_interface.html#sec:continue_build_on_failure
task testReport(type: TestReport) {
    description "Generates an aggragated test report for all subprojects."
    
    /*
    dependsOn ':carnival-util:test'
    dependsOn ':carnival-graph:test'
    dependsOn ':carnival-core:test'
    reportOn(
        project('carnival-util').test, 
        project('carnival-graph').test, 
        project('carnival-core').test
    )
    */

    destinationDirectory = file("$buildDir/reports/allTests")

    // Include the results from the `test` task in all subprojects
    testResults.from subprojects*.test

    doLast{
       ant.echo "TestReport - buildDir: $buildDir/reports/allTests"
       browse "$buildDir/reports/allTests/index.html"
   }
}


def browse(path) {
    def os = org.gradle.internal.os.OperatingSystem.current()
    if (os.isWindows()) {
        exec { commandLine 'cmd', '/c', "start $path" }
    } else if (os.isMacOsX()) {
        exec { commandLine 'open', "$path" }
    }
}



///////////////////////////////////////////////////////////////////////////////
// JaCoCo code coverage
///////////////////////////////////////////////////////////////////////////////

/*

// Only report code coverage for projects that are distributed
def publishedProjects = subprojects.findAll()

task jacocoMerge(type: JacocoMerge) {
    publishedProjects.each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn publishedProjects.test, jacocoMerge

    additionalSourceDirs.from = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(publishedProjects.sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(publishedProjects.sourceSets.main.output)
    executionData jacocoMerge.destinationFile

    reports {
        html.required = true // human readable
        xml.required = true // required by coveralls
    }
}

coveralls {
    sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn jacocoRootReport
}
*/


/////////////////////////////////
// Documentation
/////////////////////////////////

/*
// Use this instead of allGroovydoc if we need separate api docs per subproject
subprojects {
    groovydoc {
        destinationDir = file("../build/docs/groovydoc/${project.name}")

        doLast{
           ant.echo "groovydoc - destinationDir: $destinationDir"
        }
    }
}
*/

task allGroovydoc(type: Groovydoc, group: "Documentation") {
    description "Generates Groovydoc API documentation for the combined main source code of all subprojects."

    source subprojects.collect { it.sourceSets.main.allGroovy }                                                
    classpath = files(subprojects.collect { it.sourceSets.main.compileClasspath })
    destinationDir = file("${buildDir}/docs/groovydoc")
    overviewText = resources.text.fromFile("groovydoc-header.html")
    windowTitle = "Carnival API"
    docTitle "Carnival API"
}

task localPublishGroovydoc(type: Copy, group: "Documentation") {
    description "Publishes combined groovydocs to './docs/groovydoc'."
    dependsOn allGroovydoc

    from "${buildDir}/docs/groovydoc"
    into file("../docs/groovydoc")
}

task apidocClean(type: Delete, group: "Clean") {
    description "Cleans generated api docs in './docs/groovydoc'."

    delete fileTree(dir: "../docs/groovydoc/", exclude: ".gitignore").getFiles()    
}

clean.dependsOn apidocClean