/**
 *
 * CARNIVAL
 *
 * (it's a party of information)
 *
 */



///////////////////////////////////////////////////////////////////////////////
// maven publishing
///////////////////////////////////////////////////////////////////////////////
task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    from sourceSets.main.allGroovy
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    from groovydoc
    classifier = 'javadoc'
}

publishing {
    publications {
        mavenGroovy(MavenPublication) {
            artifactId = 'carnival-core'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'Carnival Core'
                    description 'The core classes of the Carnival framework'
                    url 'https://github.com/pmbb-ibi/carnival'
                    licenses {
                        license {
                            name 'GNU GENERAL PUBLIC LICENSE, Version 3, 29 June 2007'
                            url 'https://www.gnu.org/licenses/gpl-3.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id 'augustearth'
                            name 'David Birtwell'
                            email 'augustearth@gmail.com'
                        }
                        developer {
                            id 'hjwilli'
                            name 'Heather Williams'
                            email 'hjwilli@gmail.com'
                        }
                    }
                    scm {
                        connection 'scm:git:git://github.com:pmbb-ibi/carnival.git'
                        developerConnection 'scm:git:ssh://github.com:pmbb-ibi/carnival.git'
                        url 'https://github.com/pmbb-ibi/carnival'
                    }
                }
            }
            //pom.withXml {
            //    Node pomNode = asNode()
            //    pomNode.dependencies.'*'.findAll() {
            //        it.artifactId.text() == 'ojdbc6'
            //    }.each() {
            //        it.parent().remove(it)
            //    }
            //}            
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}



///////////////////////////////////////////////////////////////////////////////
// dependencies
///////////////////////////////////////////////////////////////////////////////


configurations {
    providedRuntime
    apt
}


// Annotation Processors
// 
// Started getting the following:
// The following annotation processors were detected on the compile classpath: 'org.apache.tinkerpop.gremlin.process.traversal.dsl.GremlinDslProcessor' and 'org.neo4j.kernel.impl.annotations.ServiceProcessor' and 'org.neo4j.kernel.impl.annotations.DocumentationProcessor'. Detecting annotation processors on the compile classpath is deprecated and Gradle 5.0 will ignore them. Please add them to the annotation processor path instead. If you did not intend to use annotation processors, you can use the '-proc:none' compiler argument to ignore them.
// Found documentation on the issue at: https://blog.gradle.org/incremental-compiler-avoidance#about-annotation-processors
// The apt configuration was added as per the docs.

// In this section you declare the dependencies for your production and test code
dependencies {
    // Carnival module dependencies
    implementation project(":carnival-util")
    implementation project(":carnival-graph")

    // reflections for dymamic class instantiation
    implementation 'org.reflections:reflections:0.9.11'

    // database connectors
    implementation 'mysql:mysql-connector-java:5.1.49'
    implementation 'com.microsoft.sqlserver:mssql-jdbc:8.4.1.jre8'
    implementation 'org.postgresql:postgresql:42.2.17'
    implementation 'com.h2database:h2:1.4.200'

    // http libraries
    // http-builder was deprecated by http-builder-ng
    // - carnival-core/vine/http.groovy uses the updated http-builder-ng library
    // - carnival-pmbb/vine/redcapVine.groovy uses the old http-builder library; should be updated to use http.groovy
    implementation 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
    implementation 'io.github.http-builder-ng:http-builder-ng-core:1.0.4'

    // Apache commons
    implementation 'commons-collections:commons-collections:3.2.2'
    implementation "org.apache.commons:commons-math3:3.6.1"

    // GORM
    implementation 'org.grails:grails-datastore-gorm-hibernate5:7.0.3.RELEASE'

    // RDF4J and http dependencies
    // see <http://graphdb.ontotext.com/documentation/free/using-graphdb-with-the-rdf4j-api.html#rdf4j-api>
    //compile group: 'org.eclipse.rdf4j', name: 'rdf4j-runtime', version: '2.4.0-M1'
    //compile group: 'org.eclipse.rdf4j', name: 'rdf4j-core', version: '2.4.0-M1'
    //compile group: 'org.eclipse.rdf4j', name: 'rdf4j-repository-api', version: '2.4.0-M1'
    
    implementation "org.eclipse.rdf4j:rdf4j-model:3.4.3"
    implementation "org.eclipse.rdf4j:rdf4j-repository-manager:3.4.3"
    
    // for to serialize objects as json (CachingJsonVine)
    implementation "com.fasterxml.jackson.core:jackson-annotations:2.11.3"
    implementation "com.fasterxml.jackson.core:jackson-core:2.11.3"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.11.3"

    // Spock testing
    implementation "cglib:cglib-nodep:3.3.0"
}


compileGroovy {
    options.annotationProcessorPath = configurations.apt
}





///////////////////////////////////////////////////////////////////////////////
// TASKS - CLI
///////////////////////////////////////////////////////////////////////////////

task carnivalLocalDirInit (dependsOn: ['classes'], type: JavaExec) {
    description 'Run CarnivalLocalDirInit script'

    main = 'carnival.core.cli.CarnivalLocalDirInit'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in

    if (System.getProperty('carnival.home')) {
        systemProperty('carnival.home', System.getProperty('carnival.home'))
        systemProperty('logback.configurationFile', System.getProperty('carnival.home') + '/config/logback.xml')
    }
    if (System.getenv('CARNIVAL_HOME')) {
        systemProperty('carnival.home', System.getenv('CARNIVAL_HOME'))
        systemProperty('logback.configurationFile', System.getenv('CARNIVAL_HOME') + '/config/logback.xml')
    }
    if (System.getProperty('logback.configurationFile')) {
        systemProperty("logback.configurationFile", System.getProperty('logback.configurationFile'))
    } else if (System.getenv('CARNIVAL_LOGBACK_CONFIG')) {
        systemProperty("logback.configurationFile", System.getenv('CARNIVAL_LOGBACK_CONFIG'))
    }
    if (!(System.getProperty('carnival.home') || System.getenv('CARNIVAL_HOME'))) {
        ant.echo "WARNING: Carnival home is not set. Use command line argument -Dcarnival.home= or environment variable CARNIVAL_HOME. See documentation."
        if (!(System.getProperty('logback.configurationFile') || System.getenv('CARNIVAL_LOGBACK_CONFIG'))) {
            ant.echo "WARNING: Logback configuration file not set. Use the -D command line argument like -Dlogback.configurationFile=/path/to/file.xml.  Or, set the environment variable CARNIVAL_LOGBACK_CONFIG to /path/to/file.xml. See documentation."
        }
    }

    jvmArgs '-Xms512m'
    jvmArgs '-Xmx512m'
}

test.dependsOn 'carnivalLocalDirInit'



///////////////////////////////////////////////////////////////////////////////
// BUILD 
///////////////////////////////////////////////////////////////////////////////
task createProperties(dependsOn: processResources) {
  doLast {
    new File("$buildDir/resources/main/version.properties").withWriter { w ->
        Properties p = new Properties()
        p['version'] = project.version.toString()
        p.store w, null
    }
  }
}

classes {
    dependsOn createProperties
}
